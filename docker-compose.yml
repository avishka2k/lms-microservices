version: '3.8'

services:

  postgres_db:
    container_name: postgres_db
    image: postgres:16
    restart: always
    ports:
      - 5432:5432
    environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - lms-network

  pgadmin4:
    container_name: pgadmin4
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    networks:
      - lms-network

  vault:
    image: vault:1.13.3
    container_name: vault
    hostname: vault
    ports:
      - 8200:8200
    volumes:
      - ./vault/config.hcl:/vault/config/config.hcl
      - vault-data:/vault/file/
    environment:
      - VAULT_ADDR=http://localhost:8200
    cap_add:
      - IPC_LOCK
    command: server
    restart: always
    networks:
      - lms-network

  vault-init:
    image: vault:1.13.3
    container_name: vault-init
    environment:
      - VAULT_ADDR=http://vault:8200
      - MY_VAULT_TOKEN=${MY_VAULT_TOKEN:-test}
    volumes:
      - ./vault/vault-root-token:/vault/file/vault-root-token
      - ./vault/vault-init.sh:/usr/local/bin/vault-init.sh
      - vault-data:/vault/file/
    command: >
      sh -c "chmod +x /usr/local/bin/vault-init.sh &&
             /usr/local/bin/vault-init.sh"
    restart: on-failure
    depends_on:
      - vault
    networks:
      - lms-network

  apache-kafka:
    image: apache/kafka:3.7.1
    container_name: apache-kafka
    ports:
      - 9092:9092  # External access
      - 29092:29092  # Internal Docker network access
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://apache-kafka:29092,EXTERNAL://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - lms-network

  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: discovery-server
    ports:
      - 8761:8761
    networks:
      - lms-network
    restart: always

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    ports:
      - 8888:8888
    networks:
      - lms-network
    restart: always

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - 8080:8080
    networks:
      - lms-network
    restart: always
    depends_on:
      - discovery-server

#  zipkin-server:
#    image: openzipkin/zipkin:latest
#    container_name: zipkin-server
#    ports:
#      - 9411:9411
#    networks:
#      - lms-network
#    restart: always

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - 8081:8081
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
    volumes:
      - vault-data:/vault/file/
    networks:
      - lms-network
    depends_on:
      - vault
    restart: always

  university-service:
    build:
      context: ./university-service
      dockerfile: Dockerfile
    container_name: university-service
    ports:
      - 8082:8082
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
    volumes:
      - vault-data:/vault/file/
    networks:
      - lms-network
    depends_on:
      - vault
    restart: always

  course-service:
    build:
      context: ./course-service
      dockerfile: Dockerfile
    container_name: course-service
    ports:
      - 8083:8083
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
    volumes:
      - vault-data:/vault/file/
    networks:
      - lms-network
    depends_on:
      - vault
    restart: always

  applicants-service:
    build:
      context: ./applicants-service
      dockerfile: Dockerfile
    container_name: applicants-service
    ports:
      - 8084:8084
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
    volumes:
      - vault-data:/vault/file/
    networks:
      - lms-network
    depends_on:
      - vault
    restart: always

  announcement-service:
    build:
      context: ./announcement-service
      dockerfile: Dockerfile
    container_name: announcement-service
    ports:
      - 8086:8086
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
    volumes:
      - vault-data:/vault/file/
    networks:
      - lms-network
    depends_on:
      - vault
    restart: always

networks:
  lms-network:
    driver: bridge

volumes:
  vault-data:
  kafka-data: